#--------------------------------------------------------------------------------------------------------------------------------
# 4-5-6.

# 4. Начните работу над проектом «Склад оргтехники».
# Создайте класс, описывающий склад.
# А также класс «Оргтехника», который будет базовым для классов-наследников.
# Эти классы — конкретные типы оргтехники (принтер, сканер, ксерокс).
# В базовом классе определить параметры, общие для приведенных типов.
# В классах-наследниках реализовать параметры, уникальные для каждого типа оргтехники

# 5. Продолжить работу над первым заданием.
# Разработать методы, отвечающие за приём оргтехники на склад и передачу в определенное подразделение компании.
# Для хранения данных о наименовании и количестве единиц оргтехники, а также других данных, можно использовать любую подходящую структуру, например словарь.

# 6. Продолжить работу над вторым заданием. Реализуйте механизм валидации вводимых пользователем данных.
# Например, для указания количества принтеров, отправленных на склад, нельзя использовать строковый тип данных.
# Подсказка: постарайтесь по возможности реализовать в проекте «Склад оргтехники» максимум возможностей, изученных на уроках по ООП.
#--------------------------------------------------------------------------------------------------------------------------------
class Warehouse:
    __department_name : str = ''

    # --------------------------------------------------------------------------------------------------------------------------------
    def __init__(self, name):
        self.__department_name = name
        self.__dict_goods_balances = {}     # словарь - список товаров с их остатками

    # --------------------------------------------------------------------------------------------------------------------------------
    def __str__(self):
        return self.__department_name
    
    # --------------------------------------------------------------------------------------------------------------------------------
    # ввод начальных остатков товара
    def set_start_balance(self, item, qnt):
        self.__dict_goods_balances[item] = qnt

    # --------------------------------------------------------------------------------------------------------------------------------
    # вывод всего списка остатков товара
    def get_balances_total(self, ask_category = None, ask_brand = None):
        print(f'\nОстатки подразделения {self.__department_name}:')
        for item, quantity in self.__dict_goods_balances.items():
            # if (item != 0):     # нулевой остаток не вывожу. Нет все-таки вывожу)
            print(f'\t{item} - {quantity} шт')

        if (not len(self.__dict_goods_balances)):
            print(f'\tОстатков нет')

    # --------------------------------------------------------------------------------------------------------------------------------
    # расход товара (поиск по артикулу)
    def goods_out(self, article, qnt, is_msg = False):

        if (is_msg):
            print(f'Списание {self}; {article} {qnt} шт')

        qnt_out = 0
        is_found = False

        for item, quantity in self.__dict_goods_balances.items():
            if (item.article == article):

                is_found = True
                qnt_out = qnt if (quantity >= qnt) else quantity

                try:
                    if (qnt > quantity):
                        err_text = f'Ошибка ExceptionNotEnoughQuanity: Артикул {article}; указано {qnt} шт, в наличии есть {quantity} шт; не хватает {qnt - quantity} шт'
                        raise ExceptionNotEnoughQuanity(err_text)

                except ExceptionNotEnoughQuanity as err:
                    print(err)


                self.__dict_goods_balances[item] = quantity - qnt_out
                break

        if (not is_found):
            print(f'\tАртикул {article} не найден!')

        return qnt_out

    # --------------------------------------------------------------------------------------------------------------------------------
    # расход товара (поиск по артикулу)
    def goods_in(self, article, qnt, is_msg = False):

        if (is_msg):
            print(f'Оприходование {self}; {article} {qnt} шт')

        qnt_in = 0
        is_found = False
        for item, quantity in self.__dict_goods_balances.items():

            if (item.article == article):
                is_found = True
                qnt_in = qnt
                self.__dict_goods_balances[item] = quantity + qnt
                break

        if (not is_found):
            print(f'\tТовар {article} не найден!')

        return qnt_in

    # --------------------------------------------------------------------------------------------------------------------------------
    # перемещение товара в другое подразделение (поиск по артикулу)
    def goods_move(self, other, article, qnt, is_msg = False):

        if (is_msg):
            print(f'Перемещение {self} >> {other}; {article} {qnt} шт')

        qnt_move = self.goods_out(article, qnt)         # списание количества qnt_move в self

        if (qnt_move > 0):                              # в self удалось списать кол-во => будем приходовать в other

            item_to = other.get_item_by_article(article)          # ищем товар в other

            if (not item_to is None):                             # товар найден в other
                other.goods_in(article, qnt_move)                 # оприходование количества qnt_move в other

            else:                                                 # товар не найден в other
                item_from = self.get_item_by_article(article)     # ищем товар в self

                if (not item_from is None):                       # товар найден в other
                    other.set_start_balance(item_from, qnt_move)  # ввод начального количества qnt_move в other

                else:
                    print(f'\tПеремещение не выполнено! Указан неизвестный артикул ({article})')

        return qnt_move

    # --------------------------------------------------------------------------------------------------------------------------------
    # найти товар в списке товаров (по артикулу)
    def get_item_by_article(self, article):

        for item in self.__dict_goods_balances.keys():
            if (item.article == article):
                return item

        return None

#--------------------------------------------------------------------------------------------------------------------------------
# класс Оргтехника
class OfficeEquipment:

    __category  : str = ''
    __brand     : str = ''
    __article   : str = ''

    # --------------------------------------------------------------------------------------------------------------------------------
    def __init__(self, category, brand):
        self.__category = category
        self.__brand = brand
        self.set_article()

    # --------------------------------------------------------------------------------------------------------------------------------
    def __str__(self):
        return f'{self.__article}'

    # --------------------------------------------------------------------------------------------------------------------------------
    # задать артикул товара (категория + бренд)
    def set_article(self):
        self.__article = self.category + '_' + self.brand

    # --------------------------------------------------------------------------------------------------------------------------------
    @property
    def article(self):
        return self.__article

    # --------------------------------------------------------------------------------------------------------------------------------
    @property
    def category(self):
        return self.__category

    # --------------------------------------------------------------------------------------------------------------------------------
    @property
    def brand(self):
        return self.__brand

#--------------------------------------------------------------------------------------------------------------------------------
class Printer(OfficeEquipment):

    def __init__(self, brand):
        self.__category = 'Принтер'
        super().__init__(self.__category, brand)

#--------------------------------------------------------------------------------------------------------------------------------
class Scanner(OfficeEquipment):

    def __init__(self, brand):
        self.__category = 'Сканер'
        super().__init__(self.__category, brand)

#--------------------------------------------------------------------------------------------------------------------------------
class Copier(OfficeEquipment):

    def __init__(self, brand):
        self.__category = 'Копир'
        super().__init__(self.__category, brand)

# --------------------------------------------------------------------------------------------------------------------------------
# класс исключение - проверка на ввод не числа
class ExceptionValidQuanity(Exception):

    def __init__(self, text = ''):
        self.text = text

    def __str__(self):
        return f'Ошибка! указанный параметр - не число!'

# --------------------------------------------------------------------------------------------------------------------------------
# класс исключение - проверка достаточно ли количества для совершения операции
class ExceptionNotEnoughQuanity(Exception):

    def __init__(self, text = ''):
        self.text = text

    # def __str__(self):
    #     return f'Ошибка! Указанного количества не хватает!'
# --------------------------------------------------------------------------------------------------------------------------------
# Основная программа
print('\nЗадание 4\n')

#--------------------------------------------------------------------------------------------------------------------------------
# объекты товары
print('Объекты товары:')

pr1 = Printer('HP')
pr2 = Printer('Epson')
pr3 = Printer('OKI')

sc1 = Scanner('Canon')
sc2 = Scanner('Kodak')

cp1 = Copier('Xerox')
cp2 = Copier('KYOCERA')

print('\t', pr1, pr2, pr3, sc1, sc2, cp1, cp2)
#--------------------------------------------------------------------------------------------------------------------------------
# подразделения
print('\nОбъекты подразделения:')

whs = Warehouse('Склад')
dep_1 = Warehouse('Бухгалтерия')

print('\t', whs, dep_1)

#--------------------------------------------------------------------------------------------------------------------------------
# ввод начальных остатков
whs.set_start_balance(pr1, 9)
whs.set_start_balance(pr2, 12)
whs.set_start_balance(pr3, 5)

whs.set_start_balance(sc1, 12)
whs.set_start_balance(sc2, 4)

whs.set_start_balance(cp1, 3)
whs.set_start_balance(cp2, 6)

#--------------------------------------------------------------------------------------------------------------------------------
# печать списка начальных остатков товара
print(f'\n(1) Начальные остатки:')

whs.get_balances_total()
dep_1.get_balances_total()

#--------------------------------------------------------------------------------------------------------------------------------
print(f'\n(2) Списание из подразделения: {whs}\n')

whs.goods_out('Копир_KYOCERA', 2, True)
whs.goods_out('Сканер_Canon', 25, True)
whs.goods_out('Сканер_CaXXXnon', 77, True)

whs.get_balances_total()

#--------------------------------------------------------------------------------------------------------------------------------
print(f'\n(3) Оприходование в подразделение: {whs}\n')

whs.goods_in('Принтер_OKI', 37, True)
whs.goods_in('Принт__ер_OKI', 111, True)

whs.get_balances_total()

#--------------------------------------------------------------------------------------------------------------------------------
print(f'\n(4) Перемещение 1 из {whs} в {dep_1}')

whs.goods_move(dep_1, 'Принтер_OKI', 39)
whs.goods_move(dep_1, 'Принтер_Epson', 11)

whs.get_balances_total()
dep_1.get_balances_total()

#--------------------------------------------------------------------------------------------------------------------------------
print(f'\n(5) Перемещение 2 из {dep_1} в {whs}')

dep_1.goods_move(whs, 'Принтер_OKI', 50)
dep_1.goods_move(whs, 'Копир_Xerox', 50)
dep_1.goods_move(whs, 'Копир_Xerox111', 33)

whs.get_balances_total()
dep_1.get_balances_total()
