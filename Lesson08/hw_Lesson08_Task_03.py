#--------------------------------------------------------------------------------------------------------------------------------
# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере.
# Необходимо запрашивать у пользователя данные и заполнять список.
# Класс-исключение должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована.
# Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу скрипта, введя, например, команду “stop”.
# При этом скрипт завершается, сформированный список выводится на экран.
# Подсказка: для данного задания примем, что пользователь может вводить только числа и строки.
# При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента и вносить его в список, только если введено число.
# Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение.
# При этом работа скрипта не должна завершаться.

# --------------------------------------------------------------------------------------------------------------------------------
class ExceptionNumberOnly(Exception):

    def __init__(self, text = ''):
        self.text = text

# --------------------------------------------------------------------------------------------------------------------------------
# класс - список чисел
class ListNumbers:

    # --------------------------------------------------------------------------------------------------------------------------------
    def __init__(self):
        self.__list = []

    # --------------------------------------------------------------------------------------------------------------------------------
    # добавление элемента в список
    def append(self, item = ''):

        if item.isdigit():
            self.__list.append(int(item))
        else:
            err_text = f'Ошибка! Элемент ({item}) - не число!'
            raise ExceptionNumberOnly(err_text)

    # --------------------------------------------------------------------------------------------------------------------------------
    # вывод значений списка
    def __str__(self):
        return str(self.__list)

# --------------------------------------------------------------------------------------------------------------------------------
# Основная программа
print('\nЗадание 3\n')

list_number = ListNumbers()

stop_input = False
while not stop_input:

    a = input('Введите элемент списка: ')

    try:
        list_number.append(a)

        print(f'Элемент {a} добавлен в список')
        print(f'Список = {list_number}')

    except ExceptionNumberOnly as err:
        print(err)

    except:
        print('Прочие ошибки')

    # --------------------------------------------------------------------------------------------------------------------------------
    is_stop = input('\nЗакончить ввод? Y/N: ')
    if (is_stop.upper() == 'Y'):
        stop_input = True
        print('Конец!')
    else:
        print('Продолжаем...\n')

print(f'Итоговый список = {list_number}')